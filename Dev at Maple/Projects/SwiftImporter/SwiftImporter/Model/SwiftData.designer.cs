using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using SwiftImporterUI.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwiftImporterUI.Model
{
    [Database(Name="Reconciliation")]
	public partial class SwiftDataDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSwiftStatement_Old(SwiftStatement_Old instance);
    partial void UpdateSwiftStatement_Old(SwiftStatement_Old instance);
    partial void DeleteSwiftStatement_Old(SwiftStatement_Old instance);
    partial void InsertSwiftStatementItem(SwiftStatementItem instance);
    partial void UpdateSwiftStatementItem(SwiftStatementItem instance);
    partial void DeleteSwiftStatementItem(SwiftStatementItem instance);
    partial void InsertSwiftStatement(SwiftStatement instance);
    partial void UpdateSwiftStatement(SwiftStatement instance);
    partial void DeleteSwiftStatement(SwiftStatement instance);
    partial void InsertMT940Activity(MT940Activity instance);
    partial void UpdateMT940Activity(MT940Activity instance);
    partial void DeleteMT940Activity(MT940Activity instance);
    partial void InsertMT535Activity(MT535Activity instance);
    partial void UpdateMT535Activity(MT535Activity instance);
    partial void DeleteMT535Activity(MT535Activity instance);
    #endregion
		
		public SwiftDataDataContext() : 
				base(Settings.Default.ReconciliationConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SwiftDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SwiftDataDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SwiftDataDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SwiftDataDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<SwiftStatement_Old> SwiftStatement_Olds
		{
			get
			{
				return this.GetTable<SwiftStatement_Old>();
			}
		}
		
		public Table<SwiftStatementItem> SwiftStatementItems
		{
			get
			{
				return this.GetTable<SwiftStatementItem>();
			}
		}
		
		public Table<SwiftStatement> SwiftStatements
		{
			get
			{
				return this.GetTable<SwiftStatement>();
			}
		}
		
		public Table<MT940Activity> MT940Activities
		{
			get
			{
				return this.GetTable<MT940Activity>();
			}
		}
		
		public Table<MT535Activity> MT535Activities
		{
			get
			{
				return this.GetTable<MT535Activity>();
			}
		}
		
		[Function(Name="dbo.InsertSwiftStatement")]
		public int InsertSwiftStatement([Parameter(Name="StatementType", DbType="VarChar(10)")] string statementType, [Parameter(Name="BIC", DbType="VarChar(50)")] string bIC, [Parameter(Name="AccNumber", DbType="VarChar(50)")] string accNumber, [Parameter(Name="StatementNumber", DbType="Int")] Nullable<int> statementNumber, [Parameter(Name="SeqNumber", DbType="Int")] Nullable<int> seqNumber, [Parameter(Name="Date", DbType="DateTime")] Nullable<DateTime> date, [Parameter(Name="FileName", DbType="VarChar(100)")] string fileName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statementType, bIC, accNumber, statementNumber, seqNumber, date, fileName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertMT940Statement")]
		public int InsertMT940Statement([Parameter(Name="StatementType", DbType="VarChar(10)")] string statementType, [Parameter(Name="BIC", DbType="VarChar(50)")] string bIC, [Parameter(Name="AccNumber", DbType="VarChar(50)")] string accNumber, [Parameter(Name="StatementNumber", DbType="Int")] Nullable<int> statementNumber, [Parameter(Name="SeqNumber", DbType="Int")] Nullable<int> seqNumber, [Parameter(Name="Date", DbType="DateTime")] Nullable<DateTime> date, [Parameter(Name="FileName", DbType="VarChar(100)")] string fileName, [Parameter(Name="Currency", DbType="VarChar(10)")] string currency, [Parameter(Name="OpeningBal", DbType="Float")] Nullable<double> openingBal, [Parameter(Name="ClosingBal", DbType="Float")] Nullable<double> closingBal)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statementType, bIC, accNumber, statementNumber, seqNumber, date, fileName, currency, openingBal, closingBal);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertMT535Statement")]
		public int InsertMT535Statement([Parameter(Name="StatementType", DbType="VarChar(10)")] string statementType, [Parameter(Name="BIC", DbType="VarChar(50)")] string bIC, [Parameter(Name="AccNumber", DbType="VarChar(50)")] string accNumber, [Parameter(Name="StatementNumber", DbType="Int")] Nullable<int> statementNumber, [Parameter(Name="SeqNumber", DbType="Int")] Nullable<int> seqNumber, [Parameter(Name="Date", DbType="DateTime")] Nullable<DateTime> date, [Parameter(Name="FileName", DbType="VarChar(100)")] string fileName, [Parameter(Name="SenderReference", DbType="VarChar(500)")] string senderReference)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statementType, bIC, accNumber, statementNumber, seqNumber, date, fileName, senderReference);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.SwiftStatement")]
	public partial class SwiftStatement_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _BIC;
		
		private int _StatementNumber;
		
		private int _SequenceNumber;
		
		private string _FileName;
		
		private string _AccountNumber;
		
		private DateTime _Date;
		
		private string _Currency;
		
		private double _OpeningBalance;
		
		private double _ClosingBalance;
		
		private string _StatementType;
		
		private EntitySet<SwiftStatementItem> _SwiftStatementItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBICChanging(string value);
    partial void OnBICChanged();
    partial void OnStatementNumberChanging(int value);
    partial void OnStatementNumberChanged();
    partial void OnSequenceNumberChanging(int value);
    partial void OnSequenceNumberChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnDateChanging(DateTime value);
    partial void OnDateChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnOpeningBalanceChanging(double value);
    partial void OnOpeningBalanceChanged();
    partial void OnClosingBalanceChanging(double value);
    partial void OnClosingBalanceChanged();
    partial void OnStatementTypeChanging(string value);
    partial void OnStatementTypeChanged();
    #endregion
		
		public SwiftStatement_Old()
		{
			this._SwiftStatementItems = new EntitySet<SwiftStatementItem>(new Action<SwiftStatementItem>(this.attach_SwiftStatementItems), new Action<SwiftStatementItem>(this.detach_SwiftStatementItems));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_BIC", DbType="varchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string BIC
		{
			get
			{
				return this._BIC;
			}
			set
			{
				if ((this._BIC != value))
				{
					this.OnBICChanging(value);
					this.SendPropertyChanging();
					this._BIC = value;
					this.SendPropertyChanged("BIC");
					this.OnBICChanged();
				}
			}
		}
		
		[Column(Storage="_StatementNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StatementNumber
		{
			get
			{
				return this._StatementNumber;
			}
			set
			{
				if ((this._StatementNumber != value))
				{
					this.OnStatementNumberChanging(value);
					this.SendPropertyChanging();
					this._StatementNumber = value;
					this.SendPropertyChanged("StatementNumber");
					this.OnStatementNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SequenceNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SequenceNumber
		{
			get
			{
				return this._SequenceNumber;
			}
			set
			{
				if ((this._SequenceNumber != value))
				{
					this.OnSequenceNumberChanging(value);
					this.SendPropertyChanging();
					this._SequenceNumber = value;
					this.SendPropertyChanged("SequenceNumber");
					this.OnSequenceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="varchar(100)", CanBeNull=false, IsPrimaryKey=true)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_OpeningBalance", DbType="Float NOT NULL")]
		public double OpeningBalance
		{
			get
			{
				return this._OpeningBalance;
			}
			set
			{
				if ((this._OpeningBalance != value))
				{
					this.OnOpeningBalanceChanging(value);
					this.SendPropertyChanging();
					this._OpeningBalance = value;
					this.SendPropertyChanged("OpeningBalance");
					this.OnOpeningBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_ClosingBalance", DbType="Float NOT NULL")]
		public double ClosingBalance
		{
			get
			{
				return this._ClosingBalance;
			}
			set
			{
				if ((this._ClosingBalance != value))
				{
					this.OnClosingBalanceChanging(value);
					this.SendPropertyChanging();
					this._ClosingBalance = value;
					this.SendPropertyChanged("ClosingBalance");
					this.OnClosingBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_StatementType", DbType="varchar(50)", CanBeNull=false)]
		public string StatementType
		{
			get
			{
				return this._StatementType;
			}
			set
			{
				if ((this._StatementType != value))
				{
					this.OnStatementTypeChanging(value);
					this.SendPropertyChanging();
					this._StatementType = value;
					this.SendPropertyChanged("StatementType");
					this.OnStatementTypeChanged();
				}
			}
		}
		
		[Association(Name="SwiftStatement_Old_SwiftStatementItem", Storage="_SwiftStatementItems", ThisKey="ID", OtherKey="StatementID")]
		public EntitySet<SwiftStatementItem> SwiftStatementItems
		{
			get
			{
				return this._SwiftStatementItems;
			}
			set
			{
				this._SwiftStatementItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SwiftStatementItems(SwiftStatementItem entity)
		{
			this.SendPropertyChanging();
			entity.SwiftStatement_Old = this;
		}
		
		private void detach_SwiftStatementItems(SwiftStatementItem entity)
		{
			this.SendPropertyChanging();
			entity.SwiftStatement_Old = null;
		}
	}
	
	[Table(Name="dbo.SwiftStatementActivity")]
	public partial class SwiftStatementItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private DateTime _Date;
		
		private double _Amount;
		
		private string _Narrative;
		
		private int _StatementID;
		
		private string _SecurityIdentifier;
		
		private EntityRef<SwiftStatement_Old> _SwiftStatement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(DateTime value);
    partial void OnDateChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnNarrativeChanging(string value);
    partial void OnNarrativeChanged();
    partial void OnStatementIDChanging(int value);
    partial void OnStatementIDChanged();
    partial void OnSecurityIdentifierChanging(string value);
    partial void OnSecurityIdentifierChanged();
    #endregion
		
		public SwiftStatementItem()
		{
			this._SwiftStatement = default(EntityRef<SwiftStatement_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Narrative", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Narrative
		{
			get
			{
				return this._Narrative;
			}
			set
			{
				if ((this._Narrative != value))
				{
					this.OnNarrativeChanging(value);
					this.SendPropertyChanging();
					this._Narrative = value;
					this.SendPropertyChanged("Narrative");
					this.OnNarrativeChanged();
				}
			}
		}
		
		[Column(Storage="_StatementID", DbType="Int NOT NULL")]
		public int StatementID
		{
			get
			{
				return this._StatementID;
			}
			set
			{
				if ((this._StatementID != value))
				{
					if (this._SwiftStatement.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatementIDChanging(value);
					this.SendPropertyChanging();
					this._StatementID = value;
					this.SendPropertyChanged("StatementID");
					this.OnStatementIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityIdentifier", DbType="varchar(50)")]
		public string SecurityIdentifier
		{
			get
			{
				return this._SecurityIdentifier;
			}
			set
			{
				if ((this._SecurityIdentifier != value))
				{
					this.OnSecurityIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SecurityIdentifier = value;
					this.SendPropertyChanged("SecurityIdentifier");
					this.OnSecurityIdentifierChanged();
				}
			}
		}
		
		[Association(Name="SwiftStatement_Old_SwiftStatementItem", Storage="_SwiftStatement", ThisKey="StatementID", OtherKey="ID", IsForeignKey=true)]
		public SwiftStatement_Old SwiftStatement_Old
		{
			get
			{
				return this._SwiftStatement.Entity;
			}
			set
			{
				SwiftStatement_Old previousValue = this._SwiftStatement.Entity;
				if (((previousValue != value) 
							|| (this._SwiftStatement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwiftStatement.Entity = null;
						previousValue.SwiftStatementItems.Remove(this);
					}
					this._SwiftStatement.Entity = value;
					if ((value != null))
					{
						value.SwiftStatementItems.Add(this);
						this._StatementID = value.ID;
					}
					else
					{
						this._StatementID = default(int);
					}
					this.SendPropertyChanged("SwiftStatement_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SwiftStatementsAll")]
	[InheritanceMapping(Code="MT535", Type=typeof(MT535))]
	[InheritanceMapping(Code="MT940", Type=typeof(MT940), IsDefault=true)]
	public abstract partial class SwiftStatement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _StatementType;
		
		private string _BIC;
		
		private string _AccountNumber;
		
		private int _StatementNumber;
		
		private int _SequenceNumber;
		
		private DateTime _Date;
		
		private string _FileName;
		
		private EntitySet<MT940Activity> _MT940Activities;
		
		private EntitySet<MT535Activity> _MT535Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStatementTypeChanging(string value);
    partial void OnStatementTypeChanged();
    partial void OnBICChanging(string value);
    partial void OnBICChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnStatementNumberChanging(int value);
    partial void OnStatementNumberChanged();
    partial void OnSequenceNumberChanging(int value);
    partial void OnSequenceNumberChanged();
    partial void OnDateChanging(DateTime value);
    partial void OnDateChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public SwiftStatement()
		{
			this._MT940Activities = new EntitySet<MT940Activity>(new Action<MT940Activity>(this.attach_MT940Activities), new Action<MT940Activity>(this.detach_MT940Activities));
			this._MT535Activities = new EntitySet<MT535Activity>(new Action<MT535Activity>(this.attach_MT535Activities), new Action<MT535Activity>(this.detach_MT535Activities));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatementType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, IsDiscriminator=true)]
		public string StatementType
		{
			get
			{
				return this._StatementType;
			}
			set
			{
				if ((this._StatementType != value))
				{
					this.OnStatementTypeChanging(value);
					this.SendPropertyChanging();
					this._StatementType = value;
					this.SendPropertyChanged("StatementType");
					this.OnStatementTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BIC", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BIC
		{
			get
			{
				return this._BIC;
			}
			set
			{
				if ((this._BIC != value))
				{
					this.OnBICChanging(value);
					this.SendPropertyChanging();
					this._BIC = value;
					this.SendPropertyChanged("BIC");
					this.OnBICChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_StatementNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StatementNumber
		{
			get
			{
				return this._StatementNumber;
			}
			set
			{
				if ((this._StatementNumber != value))
				{
					this.OnStatementNumberChanging(value);
					this.SendPropertyChanging();
					this._StatementNumber = value;
					this.SendPropertyChanged("StatementNumber");
					this.OnStatementNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SequenceNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SequenceNumber
		{
			get
			{
				return this._SequenceNumber;
			}
			set
			{
				if ((this._SequenceNumber != value))
				{
					this.OnSequenceNumberChanging(value);
					this.SendPropertyChanging();
					this._SequenceNumber = value;
					this.SendPropertyChanged("SequenceNumber");
					this.OnSequenceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Association(Name="SwiftStatement_MT940Activity", Storage="_MT940Activities", ThisKey="ID", OtherKey="StatementID")]
		public EntitySet<MT940Activity> MT940Activities
		{
			get
			{
				return this._MT940Activities;
			}
			set
			{
				this._MT940Activities.Assign(value);
			}
		}
		
		[Association(Name="SwiftStatement_MT535Activity", Storage="_MT535Activities", ThisKey="ID", OtherKey="StatementID")]
		public EntitySet<MT535Activity> MT535Activities
		{
			get
			{
				return this._MT535Activities;
			}
			set
			{
				this._MT535Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MT940Activities(MT940Activity entity)
		{
			this.SendPropertyChanging();
			entity.SwiftStatement = this;
		}
		
		private void detach_MT940Activities(MT940Activity entity)
		{
			this.SendPropertyChanging();
			entity.SwiftStatement = null;
		}
		
		private void attach_MT535Activities(MT535Activity entity)
		{
			this.SendPropertyChanging();
			entity.SwiftStatement = this;
		}
		
		private void detach_MT535Activities(MT535Activity entity)
		{
			this.SendPropertyChanging();
			entity.SwiftStatement = null;
		}
	}
	
	public partial class MT535 : SwiftStatement
	{
		
		private string _SenderReference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnSenderReferenceChanging(string value);
    partial void OnSenderReferenceChanged();
    #endregion
		
		public MT535()
		{
			OnCreated();
		}
		
		[Column(Storage="_SenderReference", DbType="varchar(500)", CanBeNull=false)]
		public string SenderReference
		{
			get
			{
				return this._SenderReference;
			}
			set
			{
				if ((this._SenderReference != value))
				{
					this.OnSenderReferenceChanging(value);
					this.SendPropertyChanging();
					this._SenderReference = value;
					this.SendPropertyChanged("SenderReference");
					this.OnSenderReferenceChanged();
				}
			}
		}
	}
	
	public partial class MT940 : SwiftStatement
	{
		
		private string _Currency;
		
		private double _OpeningBalance;
		
		private double _ClosingBalance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnOpeningBalanceChanging(double value);
    partial void OnOpeningBalanceChanged();
    partial void OnClosingBalanceChanging(double value);
    partial void OnClosingBalanceChanged();
    #endregion
		
		public MT940()
		{
			OnCreated();
		}
		
		[Column(Storage="_Currency", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_OpeningBalance", DbType="Float NOT NULL")]
		public double OpeningBalance
		{
			get
			{
				return this._OpeningBalance;
			}
			set
			{
				if ((this._OpeningBalance != value))
				{
					this.OnOpeningBalanceChanging(value);
					this.SendPropertyChanging();
					this._OpeningBalance = value;
					this.SendPropertyChanged("OpeningBalance");
					this.OnOpeningBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_ClosingBalance", DbType="Float NOT NULL")]
		public double ClosingBalance
		{
			get
			{
				return this._ClosingBalance;
			}
			set
			{
				if ((this._ClosingBalance != value))
				{
					this.OnClosingBalanceChanging(value);
					this.SendPropertyChanging();
					this._ClosingBalance = value;
					this.SendPropertyChanged("ClosingBalance");
					this.OnClosingBalanceChanged();
				}
			}
		}
	}
	
	[Table(Name="dbo.MT940Activity")]
	public partial class MT940Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private DateTime _ValueDate;
		
		private Nullable<DateTime> _EntryDate;
		
		private double _Amount;
		
		private string _Description;
		
		private int _StatementID;
		
		private Nullable<DateTime> _InsertedWhen;
		
		private string _InsertedBy;
		
		private EntityRef<SwiftStatement> _SwiftStatement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueDateChanging(DateTime value);
    partial void OnValueDateChanged();
    partial void OnEntryDateChanging(Nullable<DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatementIDChanging(int value);
    partial void OnStatementIDChanged();
    partial void OnInsertedWhenChanging(Nullable<DateTime> value);
    partial void OnInsertedWhenChanged();
    partial void OnInsertedByChanging(string value);
    partial void OnInsertedByChanged();
    #endregion
		
		public MT940Activity()
		{
			this._SwiftStatement = default(EntityRef<SwiftStatement>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDate", DbType="DateTime NOT NULL")]
		public DateTime ValueDate
		{
			get
			{
				return this._ValueDate;
			}
			set
			{
				if ((this._ValueDate != value))
				{
					this.OnValueDateChanging(value);
					this.SendPropertyChanging();
					this._ValueDate = value;
					this.SendPropertyChanged("ValueDate");
					this.OnValueDateChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		public Nullable<DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StatementID", DbType="Int NOT NULL")]
		public int StatementID
		{
			get
			{
				return this._StatementID;
			}
			set
			{
				if ((this._StatementID != value))
				{
					if (this._SwiftStatement.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatementIDChanging(value);
					this.SendPropertyChanging();
					this._StatementID = value;
					this.SendPropertyChanged("StatementID");
					this.OnStatementIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsertedWhen", DbType="DateTime")]
		public Nullable<DateTime> InsertedWhen
		{
			get
			{
				return this._InsertedWhen;
			}
			set
			{
				if ((this._InsertedWhen != value))
				{
					this.OnInsertedWhenChanging(value);
					this.SendPropertyChanging();
					this._InsertedWhen = value;
					this.SendPropertyChanged("InsertedWhen");
					this.OnInsertedWhenChanged();
				}
			}
		}
		
		[Column(Storage="_InsertedBy", DbType="VarChar(50)")]
		public string InsertedBy
		{
			get
			{
				return this._InsertedBy;
			}
			set
			{
				if ((this._InsertedBy != value))
				{
					this.OnInsertedByChanging(value);
					this.SendPropertyChanging();
					this._InsertedBy = value;
					this.SendPropertyChanged("InsertedBy");
					this.OnInsertedByChanged();
				}
			}
		}
		
		[Association(Name="SwiftStatement_MT940Activity", Storage="_SwiftStatement", ThisKey="StatementID", OtherKey="ID", IsForeignKey=true)]
		public SwiftStatement SwiftStatement
		{
			get
			{
				return this._SwiftStatement.Entity;
			}
			set
			{
				SwiftStatement previousValue = this._SwiftStatement.Entity;
				if (((previousValue != value) 
							|| (this._SwiftStatement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwiftStatement.Entity = null;
						previousValue.MT940Activities.Remove(this);
					}
					this._SwiftStatement.Entity = value;
					if ((value != null))
					{
						value.MT940Activities.Add(this);
						this._StatementID = value.ID;
					}
					else
					{
						this._StatementID = default(int);
					}
					this.SendPropertyChanged("SwiftStatement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MT535Activity")]
	public partial class MT535Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SecurityIdentifier;
		
		private string _Description;
		
		private double _AggrBalance;
		
		private int _StatementID;
		
		private Nullable<DateTime> _InsertedWhen;
		
		private string _InsertedBy;
		
		private EntityRef<SwiftStatement> _SwiftStatement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSecurityIdentifierChanging(string value);
    partial void OnSecurityIdentifierChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAggrBalanceChanging(double value);
    partial void OnAggrBalanceChanged();
    partial void OnStatementIDChanging(int value);
    partial void OnStatementIDChanged();
    partial void OnInsertedWhenChanging(Nullable<DateTime> value);
    partial void OnInsertedWhenChanged();
    partial void OnInsertedByChanging(string value);
    partial void OnInsertedByChanged();
    #endregion
		
		public MT535Activity()
		{
			this._SwiftStatement = default(EntityRef<SwiftStatement>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityIdentifier", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SecurityIdentifier
		{
			get
			{
				return this._SecurityIdentifier;
			}
			set
			{
				if ((this._SecurityIdentifier != value))
				{
					this.OnSecurityIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SecurityIdentifier = value;
					this.SendPropertyChanged("SecurityIdentifier");
					this.OnSecurityIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_AggrBalance", DbType="Float NOT NULL")]
		public double AggrBalance
		{
			get
			{
				return this._AggrBalance;
			}
			set
			{
				if ((this._AggrBalance != value))
				{
					this.OnAggrBalanceChanging(value);
					this.SendPropertyChanging();
					this._AggrBalance = value;
					this.SendPropertyChanged("AggrBalance");
					this.OnAggrBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_StatementID", DbType="Int NOT NULL")]
		public int StatementID
		{
			get
			{
				return this._StatementID;
			}
			set
			{
				if ((this._StatementID != value))
				{
					if (this._SwiftStatement.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatementIDChanging(value);
					this.SendPropertyChanging();
					this._StatementID = value;
					this.SendPropertyChanged("StatementID");
					this.OnStatementIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsertedWhen", DbType="DateTime")]
		public Nullable<DateTime> InsertedWhen
		{
			get
			{
				return this._InsertedWhen;
			}
			set
			{
				if ((this._InsertedWhen != value))
				{
					this.OnInsertedWhenChanging(value);
					this.SendPropertyChanging();
					this._InsertedWhen = value;
					this.SendPropertyChanged("InsertedWhen");
					this.OnInsertedWhenChanged();
				}
			}
		}
		
		[Column(Storage="_InsertedBy", DbType="VarChar(50)")]
		public string InsertedBy
		{
			get
			{
				return this._InsertedBy;
			}
			set
			{
				if ((this._InsertedBy != value))
				{
					this.OnInsertedByChanging(value);
					this.SendPropertyChanging();
					this._InsertedBy = value;
					this.SendPropertyChanged("InsertedBy");
					this.OnInsertedByChanged();
				}
			}
		}
		
		[Association(Name="SwiftStatement_MT535Activity", Storage="_SwiftStatement", ThisKey="StatementID", OtherKey="ID", IsForeignKey=true)]
		public SwiftStatement SwiftStatement
		{
			get
			{
				return this._SwiftStatement.Entity;
			}
			set
			{
				SwiftStatement previousValue = this._SwiftStatement.Entity;
				if (((previousValue != value) 
							|| (this._SwiftStatement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwiftStatement.Entity = null;
						previousValue.MT535Activities.Remove(this);
					}
					this._SwiftStatement.Entity = value;
					if ((value != null))
					{
						value.MT535Activities.Add(this);
						this._StatementID = value.ID;
					}
					else
					{
						this._StatementID = default(int);
					}
					this.SendPropertyChanged("SwiftStatement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
